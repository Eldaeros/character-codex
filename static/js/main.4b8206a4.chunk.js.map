{"version":3,"sources":["serviceWorker.ts","theme.js","components/mist/CharacterTheme.tsx","components/mist/Sheet.tsx","components/mist/DataController.tsx","components/mist/SheetController.tsx","components/AppBar.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","createMuiTheme","palette","type","primary","blueGrey","CharacterTheme","state","cardSide","CharacterThemeContainer","column","this","props","elevation","style","backgroundColor","CustomCardHeader","padding","theme","spacing","avatar","Avatar","aria-label","substring","action","IconButton","size","MoreVert","title","name","subheader","CardContent","margin","Typography","variant","color","component","powers","Object","keys","map","key","weaknesses","length","letter","tag","Divider","improvements","Component","styled","other","Card","Tag","TagLayout","div","CardHeader","Sheet","character","themes","values","index","CharacterSheet","unflatten","require","creds","url","sheetId","apiKey","_","SheetController","callback","data","setState","characters","fetch","then","response","json","batchColumnValues","valueRanges","columns","i","columnObject","j","push","error","console","log","content","playerName","findIndex","player","toLowerCase","displayName","charAt","toUpperCase","slice","ErrorBlock","ButtonAppBar","side","React","useState","top","left","bottom","right","toggleDrawer","open","event","AppBar","position","Toolbar","Button","onClick","Menu","Drawer","onClose","role","onKeyDown","List","text","ListItem","button","ListItemIcon","ListItemText","CharacterRoute","parsed","parse","search","App","basename","Paper","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b8206a4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport { blueGrey } from '@material-ui/core/colors';\n\nexport default createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: blueGrey,\n      },\n});\n","import React, { FunctionComponent, Component } from \"react\";\nimport styled from \"styled-components\";\nimport {\n    CardHeader,\n    Card,\n    Divider,\n    Typography,\n    CardContent,\n    IconButton,\n    Avatar,\n    makeStyles,\n    createStyles,\n    Theme,\n} from \"@material-ui/core\";\nimport { MoreVert as MoreVertIcon } from \"@material-ui/icons\";\nimport theme from \"../../theme\";\n\nexport interface ThemeProps {\n    name?: string;\n    type?: MythosTheme | LogosTheme;\n    powers?: any;\n    weaknesses?: any;\n    improvements?: string[];\n    column: number;\n}\ninterface ThemeState {\n    cardSide: \"front\" | \"back\";\n}\nexport interface CharacterTag {\n    [key: string]: string;\n}\n\nexport type MythosTheme =\n    | \"Adaptation\"\n    | \"Bastion\"\n    | \"Conjuration\"\n    | \"Destiny\"\n    | \"Divination\"\n    | \"Expression\"\n    | \"Familiar\"\n    | \"Mobility\"\n    | \"Relic\"\n    | \"Subversion\";\nexport type LogosTheme =\n    | \"Defining Event\"\n    | \"Defining Relationship\"\n    | \"Mission\"\n    | \"Personality\"\n    | \"Possessions\"\n    | \"Routine\"\n    | \"Training\"\n    | \"Turf\";\n\nexport class CharacterTheme extends Component<ThemeProps, ThemeState> {\n    state: ThemeState = {\n        cardSide: \"front\",\n    };\n\n    render() {\n        return (\n            <CharacterThemeContainer\n                column={this.props.column}\n                elevation={2}\n                style={{ backgroundColor: \"#333\" }}\n            >\n                <CustomCardHeader\n                    style={{ padding: theme.spacing(5, 2) }}\n                    avatar={\n                        <Avatar aria-label=\"theme\">\n                            {this.props.type && this.props.type.substring(0, 1)}\n                        </Avatar>\n                    }\n                    action={\n                        <IconButton aria-label=\"edit\" size=\"small\">\n                            <MoreVertIcon />\n                        </IconButton>\n                    }\n                    title={this.props.name}\n                    subheader={this.props.type}\n                />\n                <CardContent style={{ margin: theme.spacing(3, 0) }}>\n                    {/* Powers Section */}\n                    <Typography\n                        variant=\"body2\"\n                        color=\"textPrimary\"\n                        component=\"p\"\n                    >\n                        {this.props.powers &&\n                            Object.keys(this.props.powers).map(\n                                (key: string) => {\n                                    if (\n                                        this.props.weaknesses &&\n                                        this.props.powers[key].length > 0\n                                    ) {\n                                        return (\n                                            <Tag\n                                                key={key}\n                                                letter={key}\n                                                tag={\n                                                    this.props.powers &&\n                                                    this.props.powers[key]\n                                                }\n                                            />\n                                        );\n                                    }\n                                },\n                            )}\n                    </Typography>\n                    <Divider\n                        variant={\"middle\"}\n                        style={{ margin: theme.spacing(1, 0) }}\n                    />\n                    <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                    >\n                        {this.props.weaknesses &&\n                            Object.keys(this.props.weaknesses).map(\n                                (key: string) => {\n                                    if (\n                                        this.props.weaknesses &&\n                                        this.props.weaknesses[key].length > 0\n                                    ) {\n                                        return (\n                                            <Tag\n                                                key={key}\n                                                letter={key}\n                                                tag={\n                                                    this.props.weaknesses &&\n                                                    this.props.weaknesses[key]\n                                                }\n                                            />\n                                        );\n                                    }\n                                },\n                            )}\n                    </Typography>\n                    <Typography>{this.props.improvements}</Typography>\n                </CardContent>\n            </CharacterThemeContainer>\n        );\n    }\n}\ninterface CharacterThemeContainerProps {\n    column: number;\n}\nconst CharacterThemeContainer = styled(({ elevation, ...other }) => (\n    <Card elevation={elevation} {...other} />\n))`\n    grid-column-start: ${(props: CharacterThemeContainerProps) =>\n        props.column + 1};\n    grid-row-start: 2;\n    display: grid;\n    grid-template-rows: 50px 2fr 1fr 100px;\n`;\n\ninterface TagProps {\n    letter: string;\n    tag: string;\n    burned?: boolean;\n}\nconst Tag: FunctionComponent<TagProps> = (props: TagProps) => {\n    return (\n        <TagLayout>\n            <div>{props.letter}</div>\n            <div>{props.tag}</div>\n            <div></div>\n        </TagLayout>\n    );\n};\nconst TagLayout = styled.div`\n    display: grid\n    grid-template-columns: 20px 1fr 20px;\n    grid-column-gap: 5px;\n    height: 20px;\n`;\n\nconst CustomCardHeader = styled(CardHeader)`\n    && {\n        > .MuiCardHeader-action {\n            margin: 0px;\n            align-self: center;\n        }\n    }\n`;\n","import React, { FunctionComponent } from \"react\";\nimport { CharacterTheme } from \"./CharacterTheme\";\nimport styled from \"styled-components\";\nimport { CharacterData } from \"./DataController\";\n\ninterface Props {\n    character: CharacterData;\n}\n\nexport const Sheet: FunctionComponent<Props> = (props: Props) => {\n    return (\n        <>\n            {props.character.themes && Object.values(props.character.themes).map((theme, index) => {\n                return (\n                    <CharacterTheme\n                        column={index + 1}\n                        key={index}\n                        name={theme.name}\n                        type={theme.type}\n                        powers={theme.powers}\n                        weaknesses={theme.weaknesses}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nexport const CharacterSheet = styled.div`\n    height: calc(100vh - 64px);\n    display: grid\n    grid-template-columns: 15px repeat(4, 1fr) 15px;\n    grid-template-rows: 100px 1fr 20px;\n    grid-column-gap: 10px;\n`;","import { ThemeProps } from \"./CharacterTheme.js\";\n\nconst unflatten = require(\"unflatten\");\n\ntype Creds = typeof import(\"../../creds.json\");\nconst creds: Creds = require(\"../../creds.json\");\nconst url = `https://sheets.googleapis.com/v4/spreadsheets/${creds.sheetId}/values:batchGet?ranges=Data!G1:O92&majorDimension=COLUMNS&key=${creds.apiKey}`;\n\ntype CharacterDataSchema = typeof import(\"../../assets/characterSchema.json\");\nexport interface CharacterData {\n    name?: string;\n    player: string;\n    mythos?: string;\n    logos?: string;\n    themes?: ThemeProps[];\n}\n\nexport const fetchData = (callback: (data: CharacterData[]) => void) => {\n    fetch(url)\n        .then(response => response.json())\n        .then(\n            (data: any) => {\n                const batchColumnValues = data.valueRanges[0].values;\n\n                // Get Data\n                const columns: CharacterDataSchema[] = [];\n                for (let i = 1; i < batchColumnValues.length; i++) {\n                    let columnObject: any = {};\n                    for (let j = 0; j < batchColumnValues[i].length; j++) {\n                        columnObject[`${batchColumnValues[0][j]}`] =\n                            batchColumnValues[i][j];\n                    }\n                    columns.push(columnObject);\n                }\n\n                const characters: CharacterData[] = columns.map((column: any) => {\n                    return unflatten(column);\n                })\n\n                callback(characters);\n            },\n            (error: any) => {\n                console.log(\"error: \", error); // XX\n            },\n        );\n};\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Sheet, CharacterSheet } from \"./Sheet\";\nimport { fetchData, CharacterData } from \"./DataController\";\nimport { Card, CardContent } from \"@material-ui/core\";\n\nconst _ = require(\"lodash\");\n\ninterface Props {\n    playerName?: string;\n}\n\ninterface State {\n    characters?: CharacterData[];\n}\n\nexport class SheetController extends Component<Props, State> {\n    state: State = {};\n\n    componentDidMount() {\n        fetchData(data => {\n            return this.setState({\n                characters: data,\n            });\n        });\n    }\n\n    render() {\n        let content: JSX.Element = <div></div>;\n        if (!this.props.playerName) {\n            content = (\n                <ErrorBlock>\n                    <CardContent>Please provide a player name</CardContent>\n                </ErrorBlock>\n            );\n        } else if (this.state.characters) {\n            let character: CharacterData | undefined;\n            const index = _.findIndex(\n                this.state.characters,\n                (character: CharacterData) => {\n                    return (\n                        character.player.toLowerCase() === (this.props.playerName && this.props.playerName.toLowerCase())\n                    );\n                },\n            );\n\n            character = this.state.characters[index];\n            if (character) {\n                content = <Sheet character={character} />;\n            } else {\n                const name = this.props.playerName;\n                const displayName =\n                    name.charAt(0).toUpperCase() + name.slice(1);\n                content = (\n                    <ErrorBlock>\n                        <CardContent>\n                            Player '{displayName}' not found.\n                        </CardContent>\n                    </ErrorBlock>\n                );\n            }\n        }\n\n        return <CharacterSheet>{content}</CharacterSheet>;\n    }\n}\n\nconst ErrorBlock = styled(Card)`\n    grid-row-start: 1;\n    grid-column-start: 3;\n    grid-column-end: 5;\n    align-self: center;\n    justify-self: center;\n`;\n","import React from \"react\";\nimport { Menu as MenuIcon } from '@material-ui/icons';\n\n\nimport {\n    Toolbar,\n    IconButton,\n    Typography,\n    Button,\n    AppBar,\n    Drawer,\n    List,\n    ListItemIcon,\n    ListItem,\n    ListItemText,\n    Divider,\n} from \"@material-ui/core\";\n\nexport default function ButtonAppBar() {\n    const [state, setState] = React.useState({\n        top: false,\n        left: false,\n        bottom: false,\n        right: false,\n    });\n\n    const toggleDrawer = (side: string, open: boolean) => (event: any) => {\n        if (\n            event.type === \"keydown\" &&\n            (event.key === \"Tab\" || event.key === \"Shift\")\n        ) {\n            return;\n        }\n\n        setState({ ...state, [side]: open });\n    };\n\n    const sideList = (side: string) => (\n        <div\n            role=\"presentation\"\n            onClick={toggleDrawer(side, false)}\n            onKeyDown={toggleDrawer(side, false)}\n        >\n            <List>\n                {[\"Inbox\", \"Starred\", \"Send email\", \"Drafts\"].map(\n                    (text, index) => (\n                        <ListItem button key={text}>\n                            <ListItemIcon>\n                                <div>{index}</div>\n                            </ListItemIcon>\n                            <ListItemText primary={text} />\n                        </ListItem>\n                    ),\n                )}\n            </List>\n            <Divider />\n            <List>\n                {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\n                    <ListItem button key={text}>\n                        <ListItemIcon>\n                            <MenuIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={text} />\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    );\n\n    return (\n        <div>\n            <AppBar position=\"static\" color=\"primary\">\n                <Toolbar>\n                    <Button onClick={toggleDrawer(\"left\", true)}><MenuIcon /></Button>\n                    <Drawer\n                        open={state.left}\n                        onClose={toggleDrawer(\"left\", false)}\n                    >\n                        {sideList(\"left\")}\n                    </Drawer>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\n// const NavigationBar = styled(App)\n","import React from \"react\";\nimport \"./App.css\";\nimport { SheetController } from \"./components/mist/SheetController\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport theme from \"./theme\";\nimport ButtonAppBar from \"./components/AppBar\";\nimport styled from \"styled-components\";\nimport { Paper } from \"@material-ui/core\";\n\nconst App: React.FC = () => {\n    return (\n        <Router basename={\"/\"}>\n            <MuiThemeProvider theme={theme}>\n                <Paper elevation={0} style={{backgroundColor: \"#212121\"}}>\n                    <ButtonAppBar />\n                    <Route\n                        path={`/character-codex/`}\n                        render={props => <CharacterRoute {...props} />}\n                    />\n                </Paper>\n            </MuiThemeProvider>\n        </Router>\n    );\n};\n\nfunction CharacterRoute(props: any) {\n    const queryString = require(\"query-string\");\n    var parsed = queryString.parse(props.location.search);\n    return <SheetController playerName={parsed.name} />;\n}\n\nconst Background = styled.div`\n    /* background-color: #121212; */\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}