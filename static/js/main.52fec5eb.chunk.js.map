{"version":3,"sources":["serviceWorker.ts","components/mist/CharacterTheme.tsx","components/mist/Sheet.tsx","components/mist/DataController.tsx","components/mist/SheetController.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","CharacterTheme","state","cardSide","this","props","name","powers","map","tag","key","Object","keys","letter","weaknesses","improvements","Component","Tag","TagLayout","styled","div","Sheet","values","character","themes","theme","index","CharacterThemeContainer","column","type","_","require","flow","pr","partialRight","spread","merge","creds","url","sheetId","apiKey","getTags","value","tagStrings","split","reduce","memo","tagString","trim","push","SheetController","callback","data","setState","characters","fetch","then","response","json","batchRowValues","valueRanges","rows","i","length","rowObject","j","row","attribute","includes","themeIndex","themeKey","parse","findIndex","player","playerName","SheetContainer","ReactDOM","render","to","path","component","params","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52fec5eb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { FunctionComponent, Component } from \"react\";\nimport styled from \"styled-components\";\n\nexport interface ThemeProps {\n    name: string;\n    type: MythosTheme | LogosTheme;\n    powers: CharacterTag[];\n    weaknesses: CharacterTag[];\n    improvements?: string[];\n}\ninterface ThemeState {\n    cardSide: \"front\" | \"back\";\n}\nexport interface CharacterTag {\n    [key: string]: string\n}\n\nexport type MythosTheme =\n    \"Adaptation\" |\n    \"Bastion\" |\n    \"Conjuration\" |\n    \"Destiny\" |\n    \"Divination\" |\n    \"Expression\" |\n    \"Familiar\" |\n    \"Mobility\" |\n    \"Relic\" |\n    \"Subversion\";\nexport type LogosTheme = \n    \"Defining Event\" |\n    \"Defining Relationship\" |\n    \"Mission\" |\n    \"Personality\" |\n    \"Possessions\" |\n    \"Routine\" |\n    \"Training\" |\n    \"Turf\";\n\n\nexport class CharacterTheme extends Component<ThemeProps, ThemeState> {\n    state: ThemeState = {\n        cardSide: \"front\"\n    }\n\n    render() {\n        return (\n            <>\n                {/* Header Section */}\n                <div>\n                    {this.props.name}\n                </div>\n                {/* Powers Section */}\n                <div>\n                {\n                    this.props.powers.map((tag: CharacterTag) => {\n                        const key = Object.keys(tag)[0]\n                        return (\n                            <Tag\n                                key={key}\n                                letter={key}\n                                tag={tag[key]}\n                            />\n                        )\n                    })\n                }\n                </div>\n                {/* Weaknesses Section */}\n                <div>\n                {\n                    this.props.weaknesses.map((tag: CharacterTag) => {\n                        const key = Object.keys(tag)[0]\n                        return (\n                            <Tag\n                                key={key}\n                                letter={key}\n                                tag={tag[key]}\n                            />\n                        )\n                    })\n                }\n                </div>\n                {/* Improvements Section */}\n                <div>\n                    {this.props.improvements}\n                </div>\n            </>\n        );\n    }\n    \n};\n// const ThemeBox = styled.div`\n\n// `\n// const ThemeHeader = styled.div`\n//     grid-row-start: 1;\n// `\n// const ThemePowers = styled.div`\n//     grid-row-start: 2;\n// `\n// const ThemeWeakness = styled.div`\n//     grid-row-start: 3;\n// `\n// const ThemeImprove = styled.div`\n//     grid-row-start: 4;\n// `\n\n\ninterface TagProps {\n    letter: string;\n    tag: string;\n    burned?: boolean;\n}\nconst Tag: FunctionComponent<TagProps> = (\n    props: TagProps,\n) => {\n    return (\n        <TagLayout>\n            <div>{props.letter}</div>\n            <div>{props.tag}</div>\n            <div></div>\n        </TagLayout>\n    );\n};\nconst TagLayout = styled.div`\n    display: grid\n    grid-template-columns: 20px 1fr 20px;\n    grid-column-gap: 5px;\n    height: 20px;\n`\n\n\n","import React, { FunctionComponent } from \"react\";\nimport { CharacterTheme } from \"./CharacterTheme\";\nimport styled from \"styled-components\";\nimport { CharacterData } from \"./DataController\";\n\ninterface Props {\n    character: CharacterData;\n}\n\nexport const Sheet: FunctionComponent<Props> = (props: Props) => {\n    return (\n        <>\n            {Object.values(props.character.themes).map((theme, index) => {\n                return (\n                    <CharacterThemeContainer column={index + 1} key={index}>\n                        <CharacterTheme\n                            name={theme.name}\n                            type={theme.type}\n                            powers={theme.powers}\n                            weaknesses={theme.weaknesses}\n                        />\n                    </CharacterThemeContainer>\n                );\n            })}\n        </>\n    );\n};\n\ninterface CharacterThemeContainerProps {\n    column: number;\n}\nconst CharacterThemeContainer = styled.div`\n    grid-column-start: ${(props: CharacterThemeContainerProps) => props.column + 1};\n    grid-row-start: 2;\n    display: grid;\n    grid-template-rows: 50px 2fr 1fr 100px;\n`;\n","import { ThemeProps, CharacterTag } from \"./CharacterTheme.js\";\n\nconst _ = require(\"lodash\");\nconst { flow, map, partialRight: pr, spread, merge } = _;\n\ntype Creds = typeof import(\"../../creds.json\");\nconst creds: Creds = require(\"../../creds.json\");\nconst url = `https://sheets.googleapis.com/v4/spreadsheets/${creds.sheetId}/values:batchGet?ranges=Data&majorDimension=ROWS&key=${creds.apiKey}`;\n\ntype CharacterDataSchema = typeof import(\"../../assets/characterSchema.json\");\nexport interface CharacterData {\n    name: string;\n    player: string;\n    mythos: string;\n    logos: string;\n    themes: ThemeProps[];\n}\n\nexport const fetchData = (callback: (data: CharacterData[]) => void) => {\n    fetch(url)\n        .then(response => response.json())\n        .then(data => {\n            const batchRowValues = data.valueRanges[0].values;\n\n            // Get Data\n            const rows: CharacterDataSchema[] = [];\n            for (let i = 1; i < batchRowValues.length; i++) {\n                let rowObject: any = {};\n                for (let j = 0; j < batchRowValues[i].length; j++) {\n                    rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n                }\n                rows.push(rowObject);\n            }\n\n            // Parse Data\n            const characters = rows.map((row: CharacterDataSchema) => {\n                const parse = flow(\n                    pr(map, (value: any, key: string) => {\n                        let attribute = key.split(\"__\")[0];\n\n                        if (!key.includes(\"themes\")) {\n                            return {\n                                [attribute]: value,\n                            };\n                        } else {\n                            attribute = \"themes\";\n                            const themeIndex = key.split(\"__\")[1];\n                            const themeKey = key.split(\"__\")[2];\n                            if (\n                                key.includes(\"powers\") ||\n                                key.includes(\"weaknesses\")\n                            ) {\n                                value = getTags(value);\n                            }\n\n                            return {\n                                [attribute]: {\n                                    [themeIndex]: {\n                                        [themeKey]: value,\n                                    },\n                                },\n                            };\n                        }\n                    }),\n                    spread(merge),\n                );\n                const character: CharacterData = parse(row);\n\n                return character;\n            });\n\n            callback(characters);\n        });\n};\n\nexport const getTags = (value: any) => {\n    const tagStrings: string[] = value.split(\";\");\n    var tags = tagStrings.reduce((memo: CharacterTag[], tagString: string) => {\n        const letter: string = tagString.split(\":\")[0].trim();\n        const tag: string = tagString.split(\":\")[1];\n        if (letter !== \"\") {\n            memo.push({ [letter]: tag });\n        }\n        return memo;\n    }, []);\n    value = tags;\n    return value;\n};\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Sheet } from \"./Sheet\";\nimport { fetchData, CharacterData } from \"./DataController\";\n\nconst _ = require(\"lodash\");\n\ninterface Props {\n    playerName: string;\n}\n\ninterface State {\n    characters?: CharacterData[]\n}\n\nexport class SheetController extends Component<Props, State> {\n\n    state: State = {}\n\n    componentDidMount() {\n        fetchData((data) => {\n            return this.setState({\n                characters: data,\n            })\n        })\n    }\n\n    render() {\n        let character: CharacterData | undefined;\n        if (this.state.characters) {\n            const index = _.findIndex(this.state.characters, (character: CharacterData) => {\n                return character.player === this.props.playerName;\n            });\n\n            character = this.state.characters[index];\n        }\n\n        return (\n            <SheetContainer>\n                {character &&\n                    <Sheet character={character} />\n                }\n            </SheetContainer>\n        );\n    }\n\n\n};\n\nconst SheetContainer = styled.div`\n    height: 100vh;\n    display: grid\n    grid-template-columns: 15px repeat(4, 1fr) 15px;\n    grid-template-rows: 20px 1fr 20px;\n    grid-column-gap: 5px;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SheetController } from \"./components/mist/SheetController\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <div>\n            <Link to=\"/character-codex\"> Home </Link>\n            <Link to=\"/character-codex/character/peter\"> Peter </Link>\n            <Route path=\"/character/:name\" component={CharacterRoute}></Route>\n        </div>\n    </Router>,\n    document.getElementById(\"root\"),\n);\n\ninterface CharacterRouteProps {\n    playerName: string;\n}\nfunction CharacterRoute(props: any) {\n    return <SheetController playerName={props.match.params.name} />;\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}